<!--
Thank you for reporting an issue.

This issue tracker is for bugs and issues found within Node.js core.
If you require more general support please file an issue on our help
repo. https://github.com/nodejs/help


Please fill in as much of the template below as you're able.

Version: output of `node -v`
Platform: output of `uname -a` (UNIX), or version and 32 or 64-bit (Windows)
Subsystem: if known, please specify affected core module name
-->

* **Version**: v12.16.1
* **Platform**: ubuntu
* **Subsystem**: yes

### What steps will reproduce the bug?
> Note that the difference code is on line 39, line 40 !!!
> Note that the difference code is on line 39, line 40 !!!
> Note that the difference code is on line 39, line 40 !!!
> Why does the character "-" appear ??? Please view abnormal condition.
> Why does the character "-" appear ??? Please view abnormal condition.
> Why does the character "-" appear ??? Please view abnormal condition.

Normal condition
```typescript
function complement(input) {
  let result = "";
  Buffer.from(input).forEach((value) => {
    const nv = value.toString(2).padStart(8, "0");
    result += nv;
  });

  const originMsgLen = result.length;

  result += "1";

  const diff = result.length % 512;

  result = result.padEnd(result.length + 448 - diff, "0");

  result += originMsgLen.toString(2).padStart(64, "0");

  return result;
}

function main(input) {
  const compleByte = complement(input);

  for (let i = 0; i < compleByte.length / 512; i++) {
    const chunk = compleByte.substring(i * 512, (i + 1) * 512);
    const words = [];
    for (let j = 0; j < 16; j++) {
      words.push(chunk.substring(j * 32, (j + 1) * 32));
    }

    const newWorkds = [];

    for (let j = 16; j < 80; j++) {
      const w = parseInt(words[j - 3], 2) ^ parseInt(words[j - 8], 2) ^ parseInt(words[j - 14], 2) ^ parseInt(words[j - 16], 2);
      const w32 = w.toString(2).padStart(32, "0");
      const left = w32[0];


      // words.push(w32.slice(1, w32.length) + left);
      newWorkds.push(w32.slice(1, w32.length) + left);
    }

    // console.log(words);
    console.log(newWorkds);
  }
}

main("abc");

/** console 
[
  '11000010110001001100011100000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000110000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000110000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000110000',
  '00000000000000000000000000000000',
  '00000000000000000000000000110000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000'
]
*/
```
Abnormal condition
```typescript
function complement(input) {
  let result = "";
  Buffer.from(input).forEach((value) => {
    const nv = value.toString(2).padStart(8, "0");
    result += nv;
  });

  const originMsgLen = result.length;

  result += "1";

  const diff = result.length % 512;

  result = result.padEnd(result.length + 448 - diff, "0");

  result += originMsgLen.toString(2).padStart(64, "0");

  return result;
}

function main(input) {
  const compleByte = complement(input);

  for (let i = 0; i < compleByte.length / 512; i++) {
    const chunk = compleByte.substring(i * 512, (i + 1) * 512);
    const words = [];
    for (let j = 0; j < 16; j++) {
      words.push(chunk.substring(j * 32, (j + 1) * 32));
    }

    const newWorkds = [];

    for (let j = 16; j < 80; j++) {
      const w = parseInt(words[j - 3], 2) ^ parseInt(words[j - 8], 2) ^ parseInt(words[j - 14], 2) ^ parseInt(words[j - 16], 2);
      const w32 = w.toString(2).padStart(32, "0");
      const left = w32[0];


      words.push(w32.slice(1, w32.length) + left);
      // newWorkds.push(w32.slice(1, w32.length) + left);
    }

    console.log(words);
    // console.log(newWorkds);
  }
}

main("abc");
/** console 
[
  '01100001011000100110001110000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000011000',
  '11000010110001001100011100000000',
  '00000000000000000000000000000000',
  '00000000000000000000000000110000',
  '-1111010011101100111001000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000001100000',
  '1111010011101100111001000000000-',
  '00000000000000000000000000110000',
  '-1111010011101100111000101000000',
  '11110100111011001110010000000000',
  '00000000000000000000000000000000',
  '00000000000000000000000110000000',
  '00-10110001001100011100000000000',
  '00000000000000000000000011110000',
  '1000111010011010100101110000000-',
  '00000000000000000000000001010000',
  '10001110100110101001001000000000',
  '01101100010100000100001100000000',
  '00000000000000000000000011000000',
  '00010110001001100011101111000000',
  '00101100010011000110001000000000',
  '00000000000000000000000011000000',
  '1010001011010110111001110000000-',
  '-1001110101111101111001101000000',
  '00010110001001100011100000000000',
  '-1101100010100000101011000000000',
  '1001110101111101111010000000000-',
  '00000000000000000000010101100000',
  '000-1110101000101111100100000000',
  '10011101011111011110100011000000',
  '1100111010000110101000010100000-',
  '-1000101110111010110000011100000',
  '00001011100000101000010000000000',
  '1110001011001010111110110100000-',
  '-1001110010111111110110001000000',
  '00111011010010010111010011000000',
  '00011000100001001101100001000000',
  '1100010011000110000100100000000-',
  '00110110100011101101111111000000',
  '1111111101101110001111001100000-',
  '01100010111100101000001000000000',
  '-1010111011101111110011000000000',
  '1111111010101100000011001100000-',
  '-1110110011100111100100101000000',
  '-1010001011000001101101001000000',
  '01110100110101001111000100000000',
  '-1011000011110011000010011000000',
  '00110100110111111011001001000000',
  '1010011111110110001101101000000-',
  '10001010010001001101000001000000',
  '0-111010101001010000000011000000',
  '1111100101000101010111111000000-',
  '00010101101000111110010000000000',
  '11010010000000011100110011000000',
  '1110000101001110111011011000000-',
  '00-10011011110010101101111000000',
  '1100011101000011010110000100000-',
  '-1001000001100001110101110000000',
  '-1011100011011011011100011000000',
  '0-111011010010000111011111000000',
  '1010100100010100101001000000000-',
  '01100011001100011001000110000000',
  '1111011001001011110100101000000-',
  '0-101011110111011010000000000000'
]
*/
```
<!--
Enter details about your bug, preferably a simple code snippet that can be
run using `node` directly without installing third-party dependencies.
-->

### How often does it reproduce? Is there a required condition?
Always
### What is the expected behavior?
It won't give me wrong data
<!--
If possible please provide textual output instead of screenshots.
-->

### What do you see instead?
Please view abnormal condition
<!--
If possible please provide textual output instead of screenshots.
-->

### Additional information

<!--
Tell us anything else you think we should know.
-->
